import java.io.File;

import de.m_marvin.metabuild.core.Metabuild;
import de.m_marvin.metabuild.core.tasks.BuildTask;
import de.m_marvin.metabuild.core.tasks.FileTask;
import de.m_marvin.metabuild.core.util.FileUtility;
import de.m_marvin.metabuild.java.script.JavaBuildScript;
import de.m_marvin.metabuild.java.tasks.JarTask;
import de.m_marvin.metabuild.maven.Maven;
import de.m_marvin.metabuild.maven.types.Artifact;
import de.m_marvin.metabuild.maven.types.Repository;
import de.m_marvin.metabuild.maven.types.Scope;
import de.m_marvin.metabuild.maven.types.Repository.Credentials;
import de.m_marvin.simplelogging.Log;

public class Buildfile extends JavaBuildScript {
	
	public String version = "0.1_build2";
	
	public File installDir = new File(System.getProperty("user.home"), "/.meta/versions/meta-" + version + "/");
	
	@Override
	public void init() {
		projectName = "metabuild-core";
		
		super.init();
		
		// Make metabuild API jar
		var apiJar = new JarTask("apiJar");
		apiJar.group = "build";
		apiJar.entries.put(compileJava.classesDir, "");
		apiJar.filePredicate = f -> FileUtility.isIn(f, new File("build/classes/main/java/de/m_marvin/metabuild/api"));
		apiJar.archive = new File(jar.archive.getParentFile(), FileUtility.getNameNoExtension(jar.archive) + "-api.jar");
		apiJar.dependsOn(compileJava);
		apiJar.dependencyOf(build);
		manifestApi(apiJar);
		
		// Install metabuild instance on local system
		var copyBinary = new FileTask("copyBinary", FileTask.Action.COPY, jar.archive, installDir);
		copyBinary.group = "install";
		copyBinary.dependsOn(jar);
		var copyAdditional = new FileTask("copyAdditional", FileTask.Action.COPY, new File("src/main/misc"), installDir);
		copyAdditional.renameFile = true;
		copyAdditional.group = "install";
		var install = new BuildTask("install");
		install.group = "install";
		install.dependsOn(copyAdditional, copyBinary);
		
		//compileJava.options.add("-Xlint:deprecation");
		
	}
	
	@Override
	public void repositories() {

		dependencies.repository(new Repository(
				"GHP JavaRun",
				"https://maven.pkg.github.com/m-marvin/library-javarun",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		dependencies.repository(new Repository(
				"GHP CommandLineParser",
				"https://maven.pkg.github.com/m-marvin/library-commandlineparser",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		dependencies.repository(new Repository(
				"GHP SimpleLogging",
				"https://maven.pkg.github.com/m-marvin/library-simplelogging",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		dependencies.repository(new Repository(
				"Maven Central",
				"https://repo.maven.apache.org/maven2",
				null
		));

		dependencies.repository(new Repository(
				"Maven Local",
				"file:///C:/Users/marvi/.m2/repository",
				null
		));
		
	}
	
	@Override
	public void dependencies() {
		
		// CommandLineParser
		dependencies.implementation("de.m_marvin.commandlineparser:commandlineutility:2.0");
		dependencies.implementation("de.m_marvin.commandlineparser:commandlineutility:sources:2.0");
		
		// SimpleLogging
		dependencies.implementation("de.m_marvin.simplelogging:simplelogging:2.3");
		dependencies.implementation("de.m_marvin.simplelogging:simplelogging:sources:2.3");
		
		// JavaRun
		dependencies.implementation("de.m_marvin.javarun:javarun:1.2");
		dependencies.implementation("de.m_marvin.javarun:javarun:sources:1.2");
		
		// BasicXML
		dependencies.implementation("de.m_marvin.metabuild:basicxml:0.1_build1");
		//dependencies.implementation("de.m_marvin.metabuild:basicxml:sources:0.1_build1");
		
		// Include dependencies into final binary jar
		packageExecutable();
		
		super.dependencies();
		
	}
	
	@Override
	public void manifest() {
		
		jar.metainfo.put("Main-Class", "de.m_marvin.metabuild.core.cli.MetaLaunch");
		jar.metainfo.put("Implementation-Version", version);
		jar.metainfo.put("Implementation-Title", projectName);
		jar.metainfo.put("Implementation-Vendor-Id", "de.m_marvin");
		
	}
	
	public void manifestApi(JarTask apiJar) {
		
		apiJar.metainfo.put("Implementation-Version", version);
		apiJar.metainfo.put("Implementation-Title", projectName + "-api");
		apiJar.metainfo.put("Implementation-Vendor-Id", "de.m_marvin");
		
	}
	
	public void publishing() {
		
		super.publishing();
		
		publishMaven.repository(Maven.mavenLocal());
		publishMaven.coordinates("de.m_marvin.metabuild:metabuild-core:0.1_build1");
		publishMaven.artifact("", jar.archive);
		
	}
	
}
