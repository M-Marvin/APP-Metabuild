import java.io.File;

import de.m_marvin.metabuild.core.Metabuild;
import de.m_marvin.metabuild.core.tasks.BuildTask;
import de.m_marvin.metabuild.core.tasks.FileTask;
import de.m_marvin.metabuild.core.util.FileUtility;
import de.m_marvin.metabuild.java.script.JavaBuildScript;
import de.m_marvin.metabuild.java.tasks.JarTask;
import de.m_marvin.metabuild.maven.Maven;
import de.m_marvin.metabuild.maven.tasks.MavenPublishTask;
import de.m_marvin.metabuild.maven.types.Artifact;
import de.m_marvin.metabuild.maven.types.Repository;
import de.m_marvin.metabuild.maven.types.Scope;
import de.m_marvin.metabuild.maven.types.Repository.Credentials;
import de.m_marvin.simplelogging.Log;

public class Buildfile extends JavaBuildScript {
	
	// version declaration of this metabuild runtime
	public String version = "1.0-SNAPSHOT";
	
	// local system directory to install metabuild to
	public File installDir = new File(System.getProperty("user.home"), "/.meta/versions/meta-" + version + "/");

	// see Metabuild class
	public String wrapperIncludeDir = "wrapper/wrapper.zip";
	
	JarTask apiJar;
	MavenPublishTask publishMavenApi;
	
	@Override
	public void init() {
		
		projectName = "metabuild-core";
		
		super.init();
		
		// make metabuild API jar
		apiJar = new JarTask("apiJar");
		apiJar.group = "build";
		apiJar.entries.put(compileJava.classesDir, "");
		apiJar.entryPredicate = f -> FileUtility.isIn(f, new File("build/classes/main/java/de/m_marvin/metabuild/api"));
		apiJar.archive = new File(jar.archive.getParentFile(), FileUtility.getNameNoExtension(jar.archive) + "-api.jar");
		apiJar.dependsOn(compileJava);
		apiJar.dependencyOf(build);
		apiJar.dependencyOf(publishMaven);
		publishMaven.artifact("api", apiJar.archive);
		manifestApi(apiJar);

		withSourcesJar();
		
		// publish metabuild API jar only
		publishMavenApi = new MavenPublishTask("publishMavenApi");
		publishMavenApi.group = "publish";
		publishMavenApi.dependsOn(apiJar, sourcesJar);
		publishingApi();

		// add wrapper jar into core jar
		importBuild("wrapper", new File("../metabuild-wrapper"));
		jar.entries.put(FileUtility.concat(new File("../metabuild-wrapper"), ((JarTask) taskNamed("wrapper:jar")).archive), wrapperIncludeDir);
		jar.dependsOn("wrapper:jar");
		
		// install metabuild instance on local system
		var copyBinary = new FileTask("copyBinary", FileTask.Action.COPY, jar.archive, installDir);
		copyBinary.group = "install";
		copyBinary.dependsOn(jar);
		var copyAdditional = new FileTask("copyAdditional", FileTask.Action.COPY, new File("src/main/misc"), installDir);
		copyAdditional.renameFile = true;
		copyAdditional.group = "install";
		var install = new BuildTask("install");
		install.group = "install";
		install.dependsOn(copyAdditional, copyBinary);

		// install system plugins
		importBuild("java", new File("../metabuild-java"));
		importBuild("maven", new File("../metabuild-maven"));
		importBuild("cpp", new File("../metabuild-cpp"));
		install.dependsOn("java:copyBinary");
		install.dependsOn("maven:copyBinary");
		install.dependsOn("cpp:copyBinary");
		
		var cleanAll = new BuildTask("cleanAll");
		cleanAll.dependsOn(":clean", "java:clean", "maven:clean", "wrapper:clean", "cpp:clean");

	}
	
	@Override
	public void repositories() {

		dependencies.repository(new Repository(
				"GHP JavaRun",
				"https://maven.pkg.github.com/m-marvin/library-javarun",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		dependencies.repository(new Repository(
				"GHP CommandLineParser",
				"https://maven.pkg.github.com/m-marvin/library-commandlineparser",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		dependencies.repository(new Repository(
				"GHP SimpleLogging",
				"https://maven.pkg.github.com/m-marvin/library-simplelogging",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		dependencies.repository(new Repository(
				"Maven Central",
				"https://repo.maven.apache.org/maven2",
				null
		));

		dependencies.repository(Maven.mavenLocal());
		
	}
	
	@Override
	public void dependencies() {
		
		// CommandLineParser
		dependencies.implementation("de.m_marvin.commandlineparser:commandlineutility:2.0");
		dependencies.implementation("de.m_marvin.commandlineparser:commandlineutility:sources:2.0");
		
		// SimpleLogging
		dependencies.implementation("de.m_marvin.simplelogging:simplelogging:2.3.2");
		dependencies.implementation("de.m_marvin.simplelogging:simplelogging:sources:2.3.2");
		
		// JavaRun
		dependencies.implementation("de.m_marvin.javarun:javarun:1.2");
		dependencies.implementation("de.m_marvin.javarun:javarun:sources:1.2");
		
		// BasicXML
		dependencies.implementation("de.m_marvin.basicxml:basicxml:1.1");
		dependencies.implementation("de.m_marvin.basicxml:basicxml:sources:1.1");
		
		// Include dependencies into final binary jar
		packageExecutable();
		
		super.dependencies();
		
	}
	
	@Override
	public void manifest() {
		
		jar.metainfo.put("Main-Class", "de.m_marvin.metabuild.core.cli.MetaLaunch");
		jar.metainfo.put("Implementation-Version", version);
		jar.metainfo.put("Implementation-Title", projectName);
		jar.metainfo.put("Implementation-Vendor-Id", "de.m_marvin");
		
	}
	
	public void manifestApi(JarTask apiJar) {
		
		apiJar.metainfo.put("Implementation-Version", version);
		apiJar.metainfo.put("Implementation-Title", projectName + "-api");
		apiJar.metainfo.put("Implementation-Vendor-Id", "de.m_marvin");
		
	}
	
	public void publishing() {
		
		super.publishing();
		
		publishMavenLocal.coordinates("de.m_marvin.metabuild:metabuild-core:" + version);
		
	}

	public void publishingApi() {
		
		super.publishing();
		
		publishMavenApi.artifact("api", apiJar.archive);
		publishMavenApi.artifact("sources", sourcesJar.archive);
		publishMavenApi.repository(Maven.mavenLocal());
		publishMavenApi.coordinates("de.m_marvin.metabuild:metabuild-core-api:" + version);
		
	}
	
}
