import java.io.File;

import de.m_marvin.metabuild.core.Metabuild;
import de.m_marvin.metabuild.core.tasks.BuildTask;
import de.m_marvin.metabuild.core.tasks.FileTask;
import de.m_marvin.metabuild.core.util.FileUtility;
import de.m_marvin.metabuild.java.maven.MavenResolver;
import de.m_marvin.metabuild.java.script.JavaBuildScript;
import de.m_marvin.metabuild.java.tasks.JarTask;
import de.m_marvin.simplelogging.Log;

public class Buildfile extends JavaBuildScript {
	
	public String version = "0.1_build2";
	
	public File installDir = new File(System.getProperty("user.home"), "/.meta/versions/meta-" + version + "/");
	
	@Override
	public void init() {
		projectName = "metabuild-core";
		
		importBuild("wrapper", new File("../metabuild-wrapper"));
		
		super.init();
		
		// Metabuild API jar
		var apiJar = new JarTask("apiJar");
		apiJar.group = "build";
		apiJar.entries.put(compileJava.classesDir, "");
		apiJar.filePredicate = f -> FileUtility.isIn(f, new File("build/classes/main/java/de/m_marvin/metabuild/api"));
		apiJar.dependsOn(compileJava);
		apiJar.dependencyOf(build);
		apiJar.archive = new File(jar.archive.getParentFile(), FileUtility.getNameNoExtension(jar.archive) + "-api.jar");
		manifestApi(apiJar);
		
		// Copy Metabuild Files into Install Directory
		var copyBinary = new FileTask("copyBinary", FileTask.Action.COPY, jar.archive, installDir);
		copyBinary.group = "install";
		copyBinary.dependsOn(jar);
		var copyAdditional = new FileTask("copyAdditional", FileTask.Action.COPY, new File("src/main/misc"), installDir);
		copyAdditional.renameFile = true;
		copyAdditional.group = "install";
		var install = new BuildTask("install");
		install.group = "install";
		install.dependsOn(copyAdditional, copyBinary);
		
	}
	
	@Override
	public void repositories() {
		
		implementation.repository(new MavenResolver.MavenRepository(
				"GHP JavaRun",
				"https://maven.pkg.github.com/m-marvin/app-javarun",
				new MavenResolver.MavenRepository.Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));
		
		implementation.repository(new MavenResolver.MavenRepository(
				"GHP CommandLineParser",
				"https://maven.pkg.github.com/m-marvin/library-commandlineparser",
				new MavenResolver.MavenRepository.Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		implementation.repository(new MavenResolver.MavenRepository(
				"GHP SimpleLogging",
				"https://maven.pkg.github.com/m-marvin/library-simplelogging",
				new MavenResolver.MavenRepository.Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		implementation.repository(new MavenResolver.MavenRepository(
				"Maven Central",
				"https://repo.maven.apache.org/maven2",
				null
		));
		
	}
	
	@Override
	public void dependencies() {
		
		// CommandLineParser
		implementation.add("de.m_marvin.commandlineparser:commandlineutility:2.0");
		
		// GSON
		//implementation "com.google.code.gson:gson:2.9.1"
		
		// SimpleLogging
		implementation.add("de.m_marvin.simplelogging:simplelogging:2.3");
		
		// JavaRun
		implementation.add("de.m_marvin.javarun:javarun:1.2");
		
		implementation.add("javax.xml.bind:jaxb-api:2.2.4");
		
		// Include dependencies into final binary jar
		packageDependencies();
		
		super.dependencies();
		
	}
	
	@Override
	public void manifest() {
		
		jar.metainfo.put("Main-Class", "de.m_marvin.metabuild.core.cli.MetaLaunch");
		jar.metainfo.put("Implementation-Version", version);
		jar.metainfo.put("Implementation-Title", projectName);
		jar.metainfo.put("Implementation-Vendor-Id", "de.m_marvin");
		
	}
	
	public void manifestApi(JarTask apiJar) {
		
		apiJar.metainfo.put("Implementation-Version", version);
		apiJar.metainfo.put("Implementation-Title", projectName + "-api");
		apiJar.metainfo.put("Implementation-Vendor-Id", "de.m_marvin");
		
	}
	
}
